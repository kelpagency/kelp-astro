---
import "./styles/global.scss";
import Header from "./components/Header.astro";
import Footer from "./components/Footer.astro";

export interface Props {
	title: string;
	description: string;
	image: string;
	permalink: string;
	darkHeader: boolean;
}

const {
	title = "Kelp Creative Agency",
	description = "Specializing in creating amazing websites, web apps, company branding, style guides, and design systems. Our goal is to make creative solutions simple for you.",
	image = "https://www.kelp.agency/wp-content/uploads/2019/01/youtube-cover.jpg",
	permalink = Astro.request.url,
	darkHeader = false
} = Astro.props;

let bodyClasses = "";
if (darkHeader) {
	bodyClasses = bodyClasses + " has-dark-header";
}
---

<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<meta name="msapplication-TileColor" content="#42c634" />
		<meta name="theme-color" content="#c5f5f6" />

		<!-- Favicons -->
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<link rel="mask-icon" href="/safari-pinned-tab.svg" color="#42c634" />

		<!-- Fonts -->
		<link rel="preconnect" href="https://fonts.googleapis.com" />
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
		<link
			href="https://fonts.googleapis.com/css2?family=Newsreader:ital,wght@0,400;0,600;0,700;1,400;1,600;1,700&family=Poppins:wght@500;600&display=swap"
			rel="stylesheet"
		/>

		<!-- Meta -->
		<title set:html={title} />
		<meta name="description" content={description} />

		<!-- Social -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={Astro.url} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(image, Astro.url)} />
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:url" content={Astro.url} />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<meta property="twitter:image" content={new URL(image, Astro.url)} />
	</head>
	<body class={bodyClasses}>
		<Header />
		<div data-lg-smooth data-lg-page="page-animation">
			<main>
				<slot />
			</main>
			<Footer />
		</div>
		<div data-lg-cursor data-lg-cursor-inertia=".15">
			<div data-lg-cursor-pointer></div>
		</div>
		<div data-lg-loader="slide-to-bottom">
			<div id="kelp"></div>
		</div>
		<!-- <div data-lg-preloader="fade">
			<div
				data-lg-lottie="/animations/kelp-logo.json"
				data-lg-lottie-autoplay
				data-lg-lottie-loop
				data-lg-lottie-subframe="false"
				data-lg-lottie-loop-frame="34"
			>
			</div>
		</div> -->
		<script>
			import gsap from "gsap";
			import luge from "@waaark/luge";
			import Headroom from "headroom.js";
			import imagesLoaded from "imagesloaded";
			import lottie from "lottie-web";
			import Splitting from "splitting";
			import { annotate } from "rough-notation";

			Splitting();

			// the preload animation
			// luge.preloader.add((done, remove) => {
			// 	const preloaderLogo = document.querySelector(".lg-preloader .lg-lottie");
			// 	setTimeout(() => {
			// 		preloaderLogo.play();
			// 	}, 1000);
			// 	setTimeout(() => {
			// 		done();
			// 		lottie.destroy();
			// 		remove();
			// 	}, 4500);
			// });

			luge.settings({
				credits: {
					show: false
				},
				smooth: {
					disabled: ["tablet", "mobile", { safari: "<=12" }],
					inertia: 0.15
				}
			});

			// wait till images load before starting animation library
			luge.lifecycle.add("pageInit", function (done) {
				// contact page
				const meetingsDiv = document.querySelector("#meetings-embed");
				const meetingsScript = document.createElement("script");
				meetingsScript.setAttribute("src", "https://static.hsappstatic.net/MeetingsEmbed/ex/MeetingsEmbedCode.js");
				if (meetingsDiv) {
					meetingsDiv.appendChild(meetingsScript);
					luge.emitter.emit("update");
				}

				// update luge after image load
				imagesLoaded(document.querySelector("body"), function (instance) {
					luge.emitter.emit("update");
				});

				// *********************
				// Underline all em tags
				// when they come into view
				const emphasisElements = document.querySelectorAll("main em");
				function handleIntersection(entries) {
					entries.map((entry) => {
						if (entry.isIntersecting) {
							const annotation = annotate(entry.target, {
								type: "underline",
								multiline: true,
								padding: 0,
								animationDuration: 300
							});
							annotation.show();
							observer.unobserve(entry.target);
						}
					});
				}
				const observer = new IntersectionObserver(handleIntersection);
				emphasisElements.forEach((item) => observer.observe(item));

				done();
			});

			// Sticky header
			const header = document.querySelector("header");
			const headroom = new Headroom(header, {
				offset: {
					up: 50,
					down: 50
				},
				// scroll tolerance in px before state changes
				tolerance: {
					up: 5,
					down: 0
				}
			});
			headroom.init();

			// mobile nav
			const burger = document.querySelector(".hamburger");
			burger?.addEventListener("click", function (event) {
				burger.classList.toggle("active");
				document.body.classList.toggle("mobile-menu-active");
			});
		</script>
	</body>
</html>
