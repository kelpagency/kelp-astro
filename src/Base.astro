---
import './styles/global.scss';
import Header from './components/Header.astro';
import Footer from './components/Footer.astro';

export interface Props {
	title: string;
	description: string;
	image: string;
	darkHeader: boolean;
	bodyClass: string;
}

const {
	title = 'Kelp Creative Agency',
	description = 'Specializing in creating amazing websites, web apps, company branding, style guides, and design systems. Our goal is to make creative solutions simple for you.',
	image = '/images/og.png',
	darkHeader = false,
	bodyClass = '',
	schema = JSON.stringify({
		'@context': 'https://schema.org',
		'@type': 'Organization',
		name: 'Kelp Creative Agency',
		legalName: 'Kelp Agency',
		email: 'info@kelp.agency',
		url: 'https://www.kelp.agency',
		logo: 'https://www.kelp.agency/images/kelp-logo.png',
		sameAs: [
			'https://www.facebook.com/kelpagency',
			'https://www.instagram.com/kelpagency/',
			'https://twitter.com/kelpagency',
			'https://www.linkedin.com/company/kelpagency/'
		],
		address: {
			addressLocality: 'Brooksville',
			postalCode: '34601',
			streetAddress: '924 Hale Ave'
		}
	})
} = Astro.props;

let bodyClasses = bodyClass;
if (darkHeader) {
	bodyClasses = bodyClasses + ' has-dark-header';
}
---

<!DOCTYPE html>
<html lang='en'>
	<head>
		<meta charset='UTF-8' />
		<meta name='viewport' content='width=device-width, initial-scale=1' />

		<!-- Meta -->
		<title set:html={title} />
		<meta name='description' content={description} />
		<link rel='alternate' type='application/rss+xml' href='https://www.kelp.agency/rss.xml' />

		<!-- Structured Data -->
		<script type='application/ld+json' set:html={schema} />

		<!-- Social -->
		<meta property='og:type' content='website' />
		<meta property='og:url' content={Astro.url} />
		<meta property='og:title' content={title} />
		<meta property='og:description' content={description} />
		<meta property='og:image' content={new URL(image, Astro.url)} />
		<meta property='twitter:card' content='summary_large_image' />
		<meta property='twitter:url' content={Astro.url} />
		<meta property='twitter:title' content={title} />
		<meta property='twitter:description' content={description} />
		<meta property='twitter:image' content={new URL(image, Astro.url)} />

		<!-- Favicons -->
		<meta name='msapplication-TileColor' content='#42c634' />
		<meta name='theme-color' content='#c5f5f6' />
		<link rel='apple-touch-icon' sizes='180x180' href='/apple-touch-icon.png' />
		<link rel='icon' type='image/png' sizes='32x32' href='/favicon-32x32.png' />
		<link rel='icon' type='image/png' sizes='16x16' href='/favicon-16x16.png' />
		<link rel='manifest' href='/site.webmanifest' />
		<link rel='mask-icon' href='/safari-pinned-tab.svg' color='#42c634' />

		<!-- Fonts -->
		<link
			rel='preload'
			href='/fonts/newsreader-v19-latin-regular.woff2'
			as='font'
			type='font/woff2'
			crossorigin='crossorigin'
		/>
		<link
			rel='preload'
			href='/fonts/newsreader-v19-latin-600.woff2'
			as='font'
			type='font/woff2'
			crossorigin='crossorigin'
		/>
		<link
			rel='preload'
			href='/fonts/newsreader-v19-latin-700.woff2'
			as='font'
			type='font/woff2'
			crossorigin='crossorigin'
		/>
		<link
			rel='preload'
			href='/fonts/newsreader-v19-latin-italic.woff2'
			as='font'
			type='font/woff2'
			crossorigin='crossorigin'
		/>
		<link
			rel='preload'
			href='/fonts/poppins-v20-latin-500.woff2'
			as='font'
			type='font/woff2'
			crossorigin='crossorigin'
		/>
		<link
			rel='preload'
			href='/fonts/poppins-v20-latin-600.woff2'
			as='font'
			type='font/woff2'
			crossorigin='crossorigin'
		/>
	</head>
	<body class={bodyClasses}>
		<a href='#main' class='screen-reader-text'>Skip to content</a>
		<Header />
		<main id='main'>
			<slot />
		</main>
		<Footer />
		<div data-lg-cursor data-lg-cursor-inertia='.15'>
			<div data-lg-cursor-pointer></div>
		</div>
		<script>
			import luge from '@waaark/luge';
			import lottie from 'lottie-web/build/player/lottie_light';
			import { annotate } from 'rough-notation';
		
			window.lottie = lottie;
			window.luge = luge;
			
			luge.settings({
				credits: {
					show: false
				}
			});
		
			// Underline all em tags
			// when they come into view
			const emphasisElements = document.querySelectorAll('main em');
			function handleIntersection(entries) {
				entries.map((entry) => {
					if (entry.isIntersecting) {
						const annotation = annotate(entry.target, {
							type: 'underline',
							multiline: true,
							padding: 0,
							animationDuration: 300
						});
						annotation.show();
						observer.unobserve(entry.target);
					}
				});
			}
			const observer = new IntersectionObserver(handleIntersection);
			emphasisElements?.forEach((item) => observer.observe(item));
		</script>
	</body>
</html>
